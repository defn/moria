#!/usr/bin/env python

import json
import os
import requests

status = ""
init = ""
path = os.path.split(os.path.dirname(os.path.realpath(__file__)))[0]
url = "vault.{}".format(os.getenv("KITT_DOMAIN", "kitt.run"))
ize = "{}/.initialized".format(path)

#curl https://vault.$KITT_DOMAIN/v1/sys/seal-status
try:
    req = requests.get("https://{}/v1/sys/seal-status".format(url))
    req.raise_for_status()
    status = req.json()
except requests.exceptions.RequestException as e:
    raise SystemExit(e)

#curl --request PUT --data '{"secret_shares": 5, "secret_threshold": 3}' https://vault.$KITT_DOMAIN/v1/sys/init
if "initialized" in status and not status["initialized"]:
    try:
        req = requests.put("https://{}/v1/sys/init".format(url), data = '{"secret_shares": 5, "secret_threshold": 3}')
        req.raise_for_status()
        init = req.json()
    except requests.exceptions.RequestException as e:
        raise SystemExit(e)

    # create csv file to import initialization values into pass
    with open ("{}/.init.csv".format(path), "w") as myTemp:
        myTemp.write("folder,favorite,type,name,notes,fields,login_uri,login_username,login_password,login_totp\n")

    for index in init:
        if isinstance(init[index], list):
            if len(init[index]) > 0:
                for objIndex, objItem in enumerate(init[index]):
                    with open ("{}/.init.csv".format(path), "a") as myTemp:
                        myTemp.write("moria,,login,{0}_{1},,,,,{2},\n".format(index, objIndex + 1, objItem))
        else:
            with open ("{}/.init.csv".format(path), "a") as myTemp:
                myTemp.write("moria,,login,{0},,,,,{1},\n".format(index, init[index]))

    # if .initialized file does not exist, make update will override any existing pass moria secrets
    if os.path.exists(ize):
        try:
            os.remove(ize)
        except:
            print("error while deleting file {}".format(ize))
